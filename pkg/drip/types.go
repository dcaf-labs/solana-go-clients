// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drip

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type DepositParams struct {
	TokenADepositAmount uint64
	DcaCycles           uint64
}

func (obj DepositParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenADepositAmount` param:
	err = encoder.Encode(obj.TokenADepositAmount)
	if err != nil {
		return err
	}
	// Serialize `DcaCycles` param:
	err = encoder.Encode(obj.DcaCycles)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DepositParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenADepositAmount`:
	err = decoder.Decode(&obj.TokenADepositAmount)
	if err != nil {
		return err
	}
	// Deserialize `DcaCycles`:
	err = decoder.Decode(&obj.DcaCycles)
	if err != nil {
		return err
	}
	return nil
}

type InitializeVaultParams struct {
	WhitelistedSwaps []ag_solanago.PublicKey
}

func (obj InitializeVaultParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WhitelistedSwaps` param:
	err = encoder.Encode(obj.WhitelistedSwaps)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeVaultParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WhitelistedSwaps`:
	err = decoder.Decode(&obj.WhitelistedSwaps)
	if err != nil {
		return err
	}
	return nil
}

type InitializeVaultPeriodParams struct {
	PeriodId uint64
}

func (obj InitializeVaultPeriodParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PeriodId` param:
	err = encoder.Encode(obj.PeriodId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeVaultPeriodParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PeriodId`:
	err = decoder.Decode(&obj.PeriodId)
	if err != nil {
		return err
	}
	return nil
}

type InitVaultProtoConfigParams struct {
	Granularity          uint64
	TriggerDcaSpread     uint16
	BaseWithdrawalSpread uint16
	Admin                ag_solanago.PublicKey
}

func (obj InitVaultProtoConfigParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Granularity` param:
	err = encoder.Encode(obj.Granularity)
	if err != nil {
		return err
	}
	// Serialize `TriggerDcaSpread` param:
	err = encoder.Encode(obj.TriggerDcaSpread)
	if err != nil {
		return err
	}
	// Serialize `BaseWithdrawalSpread` param:
	err = encoder.Encode(obj.BaseWithdrawalSpread)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitVaultProtoConfigParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Granularity`:
	err = decoder.Decode(&obj.Granularity)
	if err != nil {
		return err
	}
	// Deserialize `TriggerDcaSpread`:
	err = decoder.Decode(&obj.TriggerDcaSpread)
	if err != nil {
		return err
	}
	// Deserialize `BaseWithdrawalSpread`:
	err = decoder.Decode(&obj.BaseWithdrawalSpread)
	if err != nil {
		return err
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	return nil
}

type ErrorCode ag_binary.BorshEnum

const (
	ErrorCodeCannotGetPositionBump ErrorCode = iota
	ErrorCodeCannotGetVaultBump
	ErrorCodeCannotGetVaultPeriodBump
	ErrorCodeDuplicateDCAError
	ErrorCodeIncompleteSwapError
	ErrorCodeInvalidGranularity
	ErrorCodeInvalidMint
	ErrorCodeInvalidSpread
	ErrorCodeInvalidSwapAccount
	ErrorCodeInvalidNumSwaps
	ErrorCodeInvalidVaultProtoConfigReference
	ErrorCodeInvalidSwapAuthorityAccount
	ErrorCodeInvalidSwapFeeAccount
	ErrorCodeInvalidVaultPeriod
	ErrorCodeInvalidVaultReference
	ErrorCodePeriodicDripAmountIsZero
	ErrorCodePositionAlreadyClosed
	ErrorCodeWithdrawableAmountIsZero
)

func (value ErrorCode) String() string {
	switch value {
	case ErrorCodeCannotGetPositionBump:
		return "CannotGetPositionBump"
	case ErrorCodeCannotGetVaultBump:
		return "CannotGetVaultBump"
	case ErrorCodeCannotGetVaultPeriodBump:
		return "CannotGetVaultPeriodBump"
	case ErrorCodeDuplicateDCAError:
		return "DuplicateDCAError"
	case ErrorCodeIncompleteSwapError:
		return "IncompleteSwapError"
	case ErrorCodeInvalidGranularity:
		return "InvalidGranularity"
	case ErrorCodeInvalidMint:
		return "InvalidMint"
	case ErrorCodeInvalidSpread:
		return "InvalidSpread"
	case ErrorCodeInvalidSwapAccount:
		return "InvalidSwapAccount"
	case ErrorCodeInvalidNumSwaps:
		return "InvalidNumSwaps"
	case ErrorCodeInvalidVaultProtoConfigReference:
		return "InvalidVaultProtoConfigReference"
	case ErrorCodeInvalidSwapAuthorityAccount:
		return "InvalidSwapAuthorityAccount"
	case ErrorCodeInvalidSwapFeeAccount:
		return "InvalidSwapFeeAccount"
	case ErrorCodeInvalidVaultPeriod:
		return "InvalidVaultPeriod"
	case ErrorCodeInvalidVaultReference:
		return "InvalidVaultReference"
	case ErrorCodePeriodicDripAmountIsZero:
		return "PeriodicDripAmountIsZero"
	case ErrorCodePositionAlreadyClosed:
		return "PositionAlreadyClosed"
	case ErrorCodeWithdrawableAmountIsZero:
		return "WithdrawableAmountIsZero"
	default:
		return ""
	}
}
