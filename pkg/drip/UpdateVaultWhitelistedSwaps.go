// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drip

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateVaultWhitelistedSwaps is the `updateVaultWhitelistedSwaps` instruction.
type UpdateVaultWhitelistedSwaps struct {
	Params *UpdateVaultWhitelistedSwapsParams

	// [0] = [WRITE, SIGNER] admin
	//
	// [1] = [WRITE] vault
	//
	// [2] = [] vaultProtoConfig
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateVaultWhitelistedSwapsInstructionBuilder creates a new `UpdateVaultWhitelistedSwaps` instruction builder.
func NewUpdateVaultWhitelistedSwapsInstructionBuilder() *UpdateVaultWhitelistedSwaps {
	nd := &UpdateVaultWhitelistedSwaps{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *UpdateVaultWhitelistedSwaps) SetParams(params UpdateVaultWhitelistedSwapsParams) *UpdateVaultWhitelistedSwaps {
	inst.Params = &params
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *UpdateVaultWhitelistedSwaps) SetAdminAccount(admin ag_solanago.PublicKey) *UpdateVaultWhitelistedSwaps {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *UpdateVaultWhitelistedSwaps) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetVaultAccount sets the "vault" account.
func (inst *UpdateVaultWhitelistedSwaps) SetVaultAccount(vault ag_solanago.PublicKey) *UpdateVaultWhitelistedSwaps {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *UpdateVaultWhitelistedSwaps) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetVaultProtoConfigAccount sets the "vaultProtoConfig" account.
func (inst *UpdateVaultWhitelistedSwaps) SetVaultProtoConfigAccount(vaultProtoConfig ag_solanago.PublicKey) *UpdateVaultWhitelistedSwaps {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(vaultProtoConfig)
	return inst
}

// GetVaultProtoConfigAccount gets the "vaultProtoConfig" account.
func (inst *UpdateVaultWhitelistedSwaps) GetVaultProtoConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *UpdateVaultWhitelistedSwaps) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *UpdateVaultWhitelistedSwaps {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *UpdateVaultWhitelistedSwaps) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst UpdateVaultWhitelistedSwaps) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateVaultWhitelistedSwaps,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateVaultWhitelistedSwaps) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateVaultWhitelistedSwaps) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.VaultProtoConfig is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *UpdateVaultWhitelistedSwaps) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateVaultWhitelistedSwaps")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           vault", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("vaultProtoConfig", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj UpdateVaultWhitelistedSwaps) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateVaultWhitelistedSwaps) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateVaultWhitelistedSwapsInstruction declares a new UpdateVaultWhitelistedSwaps instruction with the provided parameters and accounts.
func NewUpdateVaultWhitelistedSwapsInstruction(
	// Parameters:
	params UpdateVaultWhitelistedSwapsParams,
	// Accounts:
	admin ag_solanago.PublicKey,
	vault ag_solanago.PublicKey,
	vaultProtoConfig ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *UpdateVaultWhitelistedSwaps {
	return NewUpdateVaultWhitelistedSwapsInstructionBuilder().
		SetParams(params).
		SetAdminAccount(admin).
		SetVaultAccount(vault).
		SetVaultProtoConfigAccount(vaultProtoConfig).
		SetSystemProgramAccount(systemProgram)
}
