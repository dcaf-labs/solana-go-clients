// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drip

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type OracleConfig struct {
	Enabled         bool
	Source          uint8
	UpdateAuthority ag_solanago.PublicKey
	TokenAMint      ag_solanago.PublicKey
	TokenAPrice     ag_solanago.PublicKey
	TokenBMint      ag_solanago.PublicKey
	TokenBPrice     ag_solanago.PublicKey
}

var OracleConfigDiscriminator = [8]byte{133, 196, 152, 50, 27, 21, 145, 254}

func (obj OracleConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OracleConfigDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Enabled` param:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return err
	}
	// Serialize `Source` param:
	err = encoder.Encode(obj.Source)
	if err != nil {
		return err
	}
	// Serialize `UpdateAuthority` param:
	err = encoder.Encode(obj.UpdateAuthority)
	if err != nil {
		return err
	}
	// Serialize `TokenAMint` param:
	err = encoder.Encode(obj.TokenAMint)
	if err != nil {
		return err
	}
	// Serialize `TokenAPrice` param:
	err = encoder.Encode(obj.TokenAPrice)
	if err != nil {
		return err
	}
	// Serialize `TokenBMint` param:
	err = encoder.Encode(obj.TokenBMint)
	if err != nil {
		return err
	}
	// Serialize `TokenBPrice` param:
	err = encoder.Encode(obj.TokenBPrice)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OracleConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OracleConfigDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[133 196 152 50 27 21 145 254]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return err
	}
	// Deserialize `Source`:
	err = decoder.Decode(&obj.Source)
	if err != nil {
		return err
	}
	// Deserialize `UpdateAuthority`:
	err = decoder.Decode(&obj.UpdateAuthority)
	if err != nil {
		return err
	}
	// Deserialize `TokenAMint`:
	err = decoder.Decode(&obj.TokenAMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenAPrice`:
	err = decoder.Decode(&obj.TokenAPrice)
	if err != nil {
		return err
	}
	// Deserialize `TokenBMint`:
	err = decoder.Decode(&obj.TokenBMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenBPrice`:
	err = decoder.Decode(&obj.TokenBPrice)
	if err != nil {
		return err
	}
	return nil
}

type Position struct {
	Vault                     ag_solanago.PublicKey
	PositionAuthority         ag_solanago.PublicKey
	Referrer                  ag_solanago.PublicKey
	DepositedTokenAAmount     uint64
	WithdrawnTokenBAmount     uint64
	DepositTimestamp          int64
	DripPeriodIdBeforeDeposit uint64
	NumberOfSwaps             uint64
	PeriodicDripAmount        uint64
	IsClosed                  bool
	Bump                      uint8
}

var PositionDiscriminator = [8]byte{170, 188, 143, 228, 122, 64, 247, 208}

func (obj Position) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PositionDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `PositionAuthority` param:
	err = encoder.Encode(obj.PositionAuthority)
	if err != nil {
		return err
	}
	// Serialize `Referrer` param:
	err = encoder.Encode(obj.Referrer)
	if err != nil {
		return err
	}
	// Serialize `DepositedTokenAAmount` param:
	err = encoder.Encode(obj.DepositedTokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `WithdrawnTokenBAmount` param:
	err = encoder.Encode(obj.WithdrawnTokenBAmount)
	if err != nil {
		return err
	}
	// Serialize `DepositTimestamp` param:
	err = encoder.Encode(obj.DepositTimestamp)
	if err != nil {
		return err
	}
	// Serialize `DripPeriodIdBeforeDeposit` param:
	err = encoder.Encode(obj.DripPeriodIdBeforeDeposit)
	if err != nil {
		return err
	}
	// Serialize `NumberOfSwaps` param:
	err = encoder.Encode(obj.NumberOfSwaps)
	if err != nil {
		return err
	}
	// Serialize `PeriodicDripAmount` param:
	err = encoder.Encode(obj.PeriodicDripAmount)
	if err != nil {
		return err
	}
	// Serialize `IsClosed` param:
	err = encoder.Encode(obj.IsClosed)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Position) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PositionDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[170 188 143 228 122 64 247 208]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `PositionAuthority`:
	err = decoder.Decode(&obj.PositionAuthority)
	if err != nil {
		return err
	}
	// Deserialize `Referrer`:
	err = decoder.Decode(&obj.Referrer)
	if err != nil {
		return err
	}
	// Deserialize `DepositedTokenAAmount`:
	err = decoder.Decode(&obj.DepositedTokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawnTokenBAmount`:
	err = decoder.Decode(&obj.WithdrawnTokenBAmount)
	if err != nil {
		return err
	}
	// Deserialize `DepositTimestamp`:
	err = decoder.Decode(&obj.DepositTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `DripPeriodIdBeforeDeposit`:
	err = decoder.Decode(&obj.DripPeriodIdBeforeDeposit)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfSwaps`:
	err = decoder.Decode(&obj.NumberOfSwaps)
	if err != nil {
		return err
	}
	// Deserialize `PeriodicDripAmount`:
	err = decoder.Decode(&obj.PeriodicDripAmount)
	if err != nil {
		return err
	}
	// Deserialize `IsClosed`:
	err = decoder.Decode(&obj.IsClosed)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

type VaultPeriod struct {
	Vault         ag_solanago.PublicKey
	PeriodId      uint64
	Dar           uint64
	Twap          ag_binary.Uint128
	DripTimestamp int64
	Bump          uint8
}

var VaultPeriodDiscriminator = [8]byte{224, 196, 159, 18, 79, 227, 22, 122}

func (obj VaultPeriod) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(VaultPeriodDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `PeriodId` param:
	err = encoder.Encode(obj.PeriodId)
	if err != nil {
		return err
	}
	// Serialize `Dar` param:
	err = encoder.Encode(obj.Dar)
	if err != nil {
		return err
	}
	// Serialize `Twap` param:
	err = encoder.Encode(obj.Twap)
	if err != nil {
		return err
	}
	// Serialize `DripTimestamp` param:
	err = encoder.Encode(obj.DripTimestamp)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VaultPeriod) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(VaultPeriodDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[224 196 159 18 79 227 22 122]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `PeriodId`:
	err = decoder.Decode(&obj.PeriodId)
	if err != nil {
		return err
	}
	// Deserialize `Dar`:
	err = decoder.Decode(&obj.Dar)
	if err != nil {
		return err
	}
	// Deserialize `Twap`:
	err = decoder.Decode(&obj.Twap)
	if err != nil {
		return err
	}
	// Deserialize `DripTimestamp`:
	err = decoder.Decode(&obj.DripTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

type VaultProtoConfig struct {
	Granularity             uint64
	TokenADripTriggerSpread uint16
	TokenBWithdrawalSpread  uint16
	TokenBReferralSpread    uint16
	Admin                   ag_solanago.PublicKey
}

var VaultProtoConfigDiscriminator = [8]byte{173, 22, 36, 165, 190, 3, 142, 199}

func (obj VaultProtoConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(VaultProtoConfigDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Granularity` param:
	err = encoder.Encode(obj.Granularity)
	if err != nil {
		return err
	}
	// Serialize `TokenADripTriggerSpread` param:
	err = encoder.Encode(obj.TokenADripTriggerSpread)
	if err != nil {
		return err
	}
	// Serialize `TokenBWithdrawalSpread` param:
	err = encoder.Encode(obj.TokenBWithdrawalSpread)
	if err != nil {
		return err
	}
	// Serialize `TokenBReferralSpread` param:
	err = encoder.Encode(obj.TokenBReferralSpread)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VaultProtoConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(VaultProtoConfigDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[173 22 36 165 190 3 142 199]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Granularity`:
	err = decoder.Decode(&obj.Granularity)
	if err != nil {
		return err
	}
	// Deserialize `TokenADripTriggerSpread`:
	err = decoder.Decode(&obj.TokenADripTriggerSpread)
	if err != nil {
		return err
	}
	// Deserialize `TokenBWithdrawalSpread`:
	err = decoder.Decode(&obj.TokenBWithdrawalSpread)
	if err != nil {
		return err
	}
	// Deserialize `TokenBReferralSpread`:
	err = decoder.Decode(&obj.TokenBReferralSpread)
	if err != nil {
		return err
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	return nil
}

type Vault struct {
	ProtoConfig             ag_solanago.PublicKey
	TokenAMint              ag_solanago.PublicKey
	TokenBMint              ag_solanago.PublicKey
	TokenAAccount           ag_solanago.PublicKey
	TokenBAccount           ag_solanago.PublicKey
	TreasuryTokenBAccount   ag_solanago.PublicKey
	WhitelistedSwaps        [5]ag_solanago.PublicKey
	LastDripPeriod          uint64
	DripAmount              uint64
	DripActivationTimestamp int64
	Bump                    uint8
	LimitSwaps              bool
	MaxSlippageBps          uint16
	OracleConfig            ag_solanago.PublicKey
	MaxPriceDeviationBps    uint16
}

var VaultDiscriminator = [8]byte{211, 8, 232, 43, 2, 152, 117, 119}

func (obj Vault) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(VaultDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ProtoConfig` param:
	err = encoder.Encode(obj.ProtoConfig)
	if err != nil {
		return err
	}
	// Serialize `TokenAMint` param:
	err = encoder.Encode(obj.TokenAMint)
	if err != nil {
		return err
	}
	// Serialize `TokenBMint` param:
	err = encoder.Encode(obj.TokenBMint)
	if err != nil {
		return err
	}
	// Serialize `TokenAAccount` param:
	err = encoder.Encode(obj.TokenAAccount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAccount` param:
	err = encoder.Encode(obj.TokenBAccount)
	if err != nil {
		return err
	}
	// Serialize `TreasuryTokenBAccount` param:
	err = encoder.Encode(obj.TreasuryTokenBAccount)
	if err != nil {
		return err
	}
	// Serialize `WhitelistedSwaps` param:
	err = encoder.Encode(obj.WhitelistedSwaps)
	if err != nil {
		return err
	}
	// Serialize `LastDripPeriod` param:
	err = encoder.Encode(obj.LastDripPeriod)
	if err != nil {
		return err
	}
	// Serialize `DripAmount` param:
	err = encoder.Encode(obj.DripAmount)
	if err != nil {
		return err
	}
	// Serialize `DripActivationTimestamp` param:
	err = encoder.Encode(obj.DripActivationTimestamp)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `LimitSwaps` param:
	err = encoder.Encode(obj.LimitSwaps)
	if err != nil {
		return err
	}
	// Serialize `MaxSlippageBps` param:
	err = encoder.Encode(obj.MaxSlippageBps)
	if err != nil {
		return err
	}
	// Serialize `OracleConfig` param:
	err = encoder.Encode(obj.OracleConfig)
	if err != nil {
		return err
	}
	// Serialize `MaxPriceDeviationBps` param:
	err = encoder.Encode(obj.MaxPriceDeviationBps)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Vault) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(VaultDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[211 8 232 43 2 152 117 119]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ProtoConfig`:
	err = decoder.Decode(&obj.ProtoConfig)
	if err != nil {
		return err
	}
	// Deserialize `TokenAMint`:
	err = decoder.Decode(&obj.TokenAMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenBMint`:
	err = decoder.Decode(&obj.TokenBMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAccount`:
	err = decoder.Decode(&obj.TokenAAccount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAccount`:
	err = decoder.Decode(&obj.TokenBAccount)
	if err != nil {
		return err
	}
	// Deserialize `TreasuryTokenBAccount`:
	err = decoder.Decode(&obj.TreasuryTokenBAccount)
	if err != nil {
		return err
	}
	// Deserialize `WhitelistedSwaps`:
	err = decoder.Decode(&obj.WhitelistedSwaps)
	if err != nil {
		return err
	}
	// Deserialize `LastDripPeriod`:
	err = decoder.Decode(&obj.LastDripPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DripAmount`:
	err = decoder.Decode(&obj.DripAmount)
	if err != nil {
		return err
	}
	// Deserialize `DripActivationTimestamp`:
	err = decoder.Decode(&obj.DripActivationTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `LimitSwaps`:
	err = decoder.Decode(&obj.LimitSwaps)
	if err != nil {
		return err
	}
	// Deserialize `MaxSlippageBps`:
	err = decoder.Decode(&obj.MaxSlippageBps)
	if err != nil {
		return err
	}
	// Deserialize `OracleConfig`:
	err = decoder.Decode(&obj.OracleConfig)
	if err != nil {
		return err
	}
	// Deserialize `MaxPriceDeviationBps`:
	err = decoder.Decode(&obj.MaxPriceDeviationBps)
	if err != nil {
		return err
	}
	return nil
}

type NoData struct {
	Data uint8
}

var NoDataDiscriminator = [8]byte{143, 170, 242, 179, 177, 24, 0, 94}

func (obj NoData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(NoDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NoData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(NoDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[143 170 242 179 177 24 0 94]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}
