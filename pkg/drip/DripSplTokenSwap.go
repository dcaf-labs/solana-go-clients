// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drip

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DripSplTokenSwap is the `dripSplTokenSwap` instruction.
type DripSplTokenSwap struct {

	// ····· common: [0] = [SIGNER] dripTriggerSource
	//
	// ············· [1] = [WRITE] vault
	//
	// ············· [2] = [] vaultProtoConfig
	//
	// ············· [3] = [] lastVaultPeriod
	//
	// ············· [4] = [WRITE] currentVaultPeriod
	//
	// ············· [5] = [WRITE] vaultTokenAAccount
	//
	// ············· [6] = [WRITE] vaultTokenBAccount
	//
	// ············· [7] = [WRITE] swapTokenAAccount
	//
	// ············· [8] = [WRITE] swapTokenBAccount
	//
	// ············· [9] = [WRITE] dripFeeTokenAAccount
	//
	// ············· [10] = [] tokenProgram
	//
	// [11] = [] swap
	//
	// [12] = [WRITE] swapTokenMint
	//
	// [13] = [WRITE] swapFeeAccount
	//
	// [14] = [] swapAuthority
	//
	// [15] = [] tokenSwapProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDripSplTokenSwapInstructionBuilder creates a new `DripSplTokenSwap` instruction builder.
func NewDripSplTokenSwapInstructionBuilder() *DripSplTokenSwap {
	nd := &DripSplTokenSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	return nd
}

type DripSplTokenSwapCommonAccountsBuilder struct {
	ag_solanago.AccountMetaSlice `bin:"-"`
}

func NewDripSplTokenSwapCommonAccountsBuilder() *DripSplTokenSwapCommonAccountsBuilder {
	return &DripSplTokenSwapCommonAccountsBuilder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
}

func (inst *DripSplTokenSwap) SetCommonAccountsFromBuilder(dripSplTokenSwapCommonAccountsBuilder *DripSplTokenSwapCommonAccountsBuilder) *DripSplTokenSwap {
	inst.AccountMetaSlice[0] = dripSplTokenSwapCommonAccountsBuilder.GetDripTriggerSourceAccount()
	inst.AccountMetaSlice[1] = dripSplTokenSwapCommonAccountsBuilder.GetVaultAccount()
	inst.AccountMetaSlice[2] = dripSplTokenSwapCommonAccountsBuilder.GetVaultProtoConfigAccount()
	inst.AccountMetaSlice[3] = dripSplTokenSwapCommonAccountsBuilder.GetLastVaultPeriodAccount()
	inst.AccountMetaSlice[4] = dripSplTokenSwapCommonAccountsBuilder.GetCurrentVaultPeriodAccount()
	inst.AccountMetaSlice[5] = dripSplTokenSwapCommonAccountsBuilder.GetVaultTokenAAccountAccount()
	inst.AccountMetaSlice[6] = dripSplTokenSwapCommonAccountsBuilder.GetVaultTokenBAccountAccount()
	inst.AccountMetaSlice[7] = dripSplTokenSwapCommonAccountsBuilder.GetSwapTokenAAccountAccount()
	inst.AccountMetaSlice[8] = dripSplTokenSwapCommonAccountsBuilder.GetSwapTokenBAccountAccount()
	inst.AccountMetaSlice[9] = dripSplTokenSwapCommonAccountsBuilder.GetDripFeeTokenAAccountAccount()
	inst.AccountMetaSlice[10] = dripSplTokenSwapCommonAccountsBuilder.GetTokenProgramAccount()
	return inst
}

// SetDripTriggerSourceAccount sets the "dripTriggerSource" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) SetDripTriggerSourceAccount(dripTriggerSource ag_solanago.PublicKey) *DripSplTokenSwapCommonAccountsBuilder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(dripTriggerSource).SIGNER()
	return inst
}

// GetDripTriggerSourceAccount gets the "dripTriggerSource" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) GetDripTriggerSourceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetVaultAccount sets the "vault" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) SetVaultAccount(vault ag_solanago.PublicKey) *DripSplTokenSwapCommonAccountsBuilder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetVaultProtoConfigAccount sets the "vaultProtoConfig" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) SetVaultProtoConfigAccount(vaultProtoConfig ag_solanago.PublicKey) *DripSplTokenSwapCommonAccountsBuilder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(vaultProtoConfig)
	return inst
}

// GetVaultProtoConfigAccount gets the "vaultProtoConfig" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) GetVaultProtoConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetLastVaultPeriodAccount sets the "lastVaultPeriod" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) SetLastVaultPeriodAccount(lastVaultPeriod ag_solanago.PublicKey) *DripSplTokenSwapCommonAccountsBuilder {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(lastVaultPeriod)
	return inst
}

// GetLastVaultPeriodAccount gets the "lastVaultPeriod" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) GetLastVaultPeriodAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetCurrentVaultPeriodAccount sets the "currentVaultPeriod" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) SetCurrentVaultPeriodAccount(currentVaultPeriod ag_solanago.PublicKey) *DripSplTokenSwapCommonAccountsBuilder {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(currentVaultPeriod).WRITE()
	return inst
}

// GetCurrentVaultPeriodAccount gets the "currentVaultPeriod" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) GetCurrentVaultPeriodAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetVaultTokenAAccountAccount sets the "vaultTokenAAccount" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) SetVaultTokenAAccountAccount(vaultTokenAAccount ag_solanago.PublicKey) *DripSplTokenSwapCommonAccountsBuilder {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(vaultTokenAAccount).WRITE()
	return inst
}

// GetVaultTokenAAccountAccount gets the "vaultTokenAAccount" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) GetVaultTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetVaultTokenBAccountAccount sets the "vaultTokenBAccount" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) SetVaultTokenBAccountAccount(vaultTokenBAccount ag_solanago.PublicKey) *DripSplTokenSwapCommonAccountsBuilder {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(vaultTokenBAccount).WRITE()
	return inst
}

// GetVaultTokenBAccountAccount gets the "vaultTokenBAccount" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) GetVaultTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSwapTokenAAccountAccount sets the "swapTokenAAccount" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) SetSwapTokenAAccountAccount(swapTokenAAccount ag_solanago.PublicKey) *DripSplTokenSwapCommonAccountsBuilder {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(swapTokenAAccount).WRITE()
	return inst
}

// GetSwapTokenAAccountAccount gets the "swapTokenAAccount" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) GetSwapTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSwapTokenBAccountAccount sets the "swapTokenBAccount" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) SetSwapTokenBAccountAccount(swapTokenBAccount ag_solanago.PublicKey) *DripSplTokenSwapCommonAccountsBuilder {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(swapTokenBAccount).WRITE()
	return inst
}

// GetSwapTokenBAccountAccount gets the "swapTokenBAccount" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) GetSwapTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetDripFeeTokenAAccountAccount sets the "dripFeeTokenAAccount" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) SetDripFeeTokenAAccountAccount(dripFeeTokenAAccount ag_solanago.PublicKey) *DripSplTokenSwapCommonAccountsBuilder {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(dripFeeTokenAAccount).WRITE()
	return inst
}

// GetDripFeeTokenAAccountAccount gets the "dripFeeTokenAAccount" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) GetDripFeeTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *DripSplTokenSwapCommonAccountsBuilder {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *DripSplTokenSwapCommonAccountsBuilder) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSwapAccount sets the "swap" account.
func (inst *DripSplTokenSwap) SetSwapAccount(swap ag_solanago.PublicKey) *DripSplTokenSwap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(swap)
	return inst
}

// GetSwapAccount gets the "swap" account.
func (inst *DripSplTokenSwap) GetSwapAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSwapTokenMintAccount sets the "swapTokenMint" account.
func (inst *DripSplTokenSwap) SetSwapTokenMintAccount(swapTokenMint ag_solanago.PublicKey) *DripSplTokenSwap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(swapTokenMint).WRITE()
	return inst
}

// GetSwapTokenMintAccount gets the "swapTokenMint" account.
func (inst *DripSplTokenSwap) GetSwapTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetSwapFeeAccountAccount sets the "swapFeeAccount" account.
func (inst *DripSplTokenSwap) SetSwapFeeAccountAccount(swapFeeAccount ag_solanago.PublicKey) *DripSplTokenSwap {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(swapFeeAccount).WRITE()
	return inst
}

// GetSwapFeeAccountAccount gets the "swapFeeAccount" account.
func (inst *DripSplTokenSwap) GetSwapFeeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSwapAuthorityAccount sets the "swapAuthority" account.
func (inst *DripSplTokenSwap) SetSwapAuthorityAccount(swapAuthority ag_solanago.PublicKey) *DripSplTokenSwap {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(swapAuthority)
	return inst
}

// GetSwapAuthorityAccount gets the "swapAuthority" account.
func (inst *DripSplTokenSwap) GetSwapAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetTokenSwapProgramAccount sets the "tokenSwapProgram" account.
func (inst *DripSplTokenSwap) SetTokenSwapProgramAccount(tokenSwapProgram ag_solanago.PublicKey) *DripSplTokenSwap {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(tokenSwapProgram)
	return inst
}

// GetTokenSwapProgramAccount gets the "tokenSwapProgram" account.
func (inst *DripSplTokenSwap) GetTokenSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst DripSplTokenSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DripSplTokenSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DripSplTokenSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DripSplTokenSwap) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CommonDripTriggerSource is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.CommonVault is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CommonVaultProtoConfig is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.CommonLastVaultPeriod is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.CommonCurrentVaultPeriod is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.CommonVaultTokenAAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CommonVaultTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.CommonSwapTokenAAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.CommonSwapTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.CommonDripFeeTokenAAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.CommonTokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Swap is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SwapTokenMint is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.SwapFeeAccount is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SwapAuthority is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.TokenSwapProgram is not set")
		}
	}
	return nil
}

func (inst *DripSplTokenSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DripSplTokenSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" common/dripTriggerSource", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             common/vault", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  common/vaultProtoConfig", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   common/lastVaultPeriod", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("common/currentVaultPeriod", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       common/vaultTokenA", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("       common/vaultTokenB", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("        common/swapTokenA", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        common/swapTokenB", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("     common/dripFeeTokenA", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("      common/tokenProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                     swap", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("            swapTokenMint", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                  swapFee", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("            swapAuthority", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("         tokenSwapProgram", inst.AccountMetaSlice.Get(15)))
					})
				})
		})
}

func (obj DripSplTokenSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *DripSplTokenSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewDripSplTokenSwapInstruction declares a new DripSplTokenSwap instruction with the provided parameters and accounts.
func NewDripSplTokenSwapInstruction(
	// Accounts:
	commonDripTriggerSource ag_solanago.PublicKey,
	commonVault ag_solanago.PublicKey,
	commonVaultProtoConfig ag_solanago.PublicKey,
	commonLastVaultPeriod ag_solanago.PublicKey,
	commonCurrentVaultPeriod ag_solanago.PublicKey,
	commonVaultTokenAAccount ag_solanago.PublicKey,
	commonVaultTokenBAccount ag_solanago.PublicKey,
	commonSwapTokenAAccount ag_solanago.PublicKey,
	commonSwapTokenBAccount ag_solanago.PublicKey,
	commonDripFeeTokenAAccount ag_solanago.PublicKey,
	commonTokenProgram ag_solanago.PublicKey,
	swap ag_solanago.PublicKey,
	swapTokenMint ag_solanago.PublicKey,
	swapFeeAccount ag_solanago.PublicKey,
	swapAuthority ag_solanago.PublicKey,
	tokenSwapProgram ag_solanago.PublicKey) *DripSplTokenSwap {
	return NewDripSplTokenSwapInstructionBuilder().
		SetCommonAccountsFromBuilder(
			NewDripSplTokenSwapCommonAccountsBuilder().
				SetDripTriggerSourceAccount(commonDripTriggerSource).
				SetVaultAccount(commonVault).
				SetVaultProtoConfigAccount(commonVaultProtoConfig).
				SetLastVaultPeriodAccount(commonLastVaultPeriod).
				SetCurrentVaultPeriodAccount(commonCurrentVaultPeriod).
				SetVaultTokenAAccountAccount(commonVaultTokenAAccount).
				SetVaultTokenBAccountAccount(commonVaultTokenBAccount).
				SetSwapTokenAAccountAccount(commonSwapTokenAAccount).
				SetSwapTokenBAccountAccount(commonSwapTokenBAccount).
				SetDripFeeTokenAAccountAccount(commonDripFeeTokenAAccount).
				SetTokenProgramAccount(commonTokenProgram),
		).
		SetSwapAccount(swap).
		SetSwapTokenMintAccount(swapTokenMint).
		SetSwapFeeAccountAccount(swapFeeAccount).
		SetSwapAuthorityAccount(swapAuthority).
		SetTokenSwapProgramAccount(tokenSwapProgram)
}
