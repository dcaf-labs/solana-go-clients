// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drip

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitOracleConfig is the `initOracleConfig` instruction.
type InitOracleConfig struct {
	Params *InitializeOracleConfigParams

	// [0] = [WRITE, SIGNER] oracleConfig
	//
	// [1] = [] tokenAMint
	//
	// [2] = [] tokenAPrice
	//
	// [3] = [] tokenBMint
	//
	// [4] = [] tokenBPrice
	//
	// [5] = [WRITE, SIGNER] creator
	//
	// [6] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitOracleConfigInstructionBuilder creates a new `InitOracleConfig` instruction builder.
func NewInitOracleConfigInstructionBuilder() *InitOracleConfig {
	nd := &InitOracleConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *InitOracleConfig) SetParams(params InitializeOracleConfigParams) *InitOracleConfig {
	inst.Params = &params
	return inst
}

// SetOracleConfigAccount sets the "oracleConfig" account.
func (inst *InitOracleConfig) SetOracleConfigAccount(oracleConfig ag_solanago.PublicKey) *InitOracleConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(oracleConfig).WRITE().SIGNER()
	return inst
}

// GetOracleConfigAccount gets the "oracleConfig" account.
func (inst *InitOracleConfig) GetOracleConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenAMintAccount sets the "tokenAMint" account.
func (inst *InitOracleConfig) SetTokenAMintAccount(tokenAMint ag_solanago.PublicKey) *InitOracleConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenAMint)
	return inst
}

// GetTokenAMintAccount gets the "tokenAMint" account.
func (inst *InitOracleConfig) GetTokenAMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenAPriceAccount sets the "tokenAPrice" account.
func (inst *InitOracleConfig) SetTokenAPriceAccount(tokenAPrice ag_solanago.PublicKey) *InitOracleConfig {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenAPrice)
	return inst
}

// GetTokenAPriceAccount gets the "tokenAPrice" account.
func (inst *InitOracleConfig) GetTokenAPriceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenBMintAccount sets the "tokenBMint" account.
func (inst *InitOracleConfig) SetTokenBMintAccount(tokenBMint ag_solanago.PublicKey) *InitOracleConfig {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenBMint)
	return inst
}

// GetTokenBMintAccount gets the "tokenBMint" account.
func (inst *InitOracleConfig) GetTokenBMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenBPriceAccount sets the "tokenBPrice" account.
func (inst *InitOracleConfig) SetTokenBPriceAccount(tokenBPrice ag_solanago.PublicKey) *InitOracleConfig {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenBPrice)
	return inst
}

// GetTokenBPriceAccount gets the "tokenBPrice" account.
func (inst *InitOracleConfig) GetTokenBPriceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetCreatorAccount sets the "creator" account.
func (inst *InitOracleConfig) SetCreatorAccount(creator ag_solanago.PublicKey) *InitOracleConfig {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(creator).WRITE().SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *InitOracleConfig) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitOracleConfig) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitOracleConfig {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitOracleConfig) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst InitOracleConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitOracleConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitOracleConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitOracleConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.OracleConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenAMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenAPrice is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenBMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenBPrice is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *InitOracleConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitOracleConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" oracleConfig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   tokenAMint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  tokenAPrice", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   tokenBMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  tokenBPrice", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("      creator", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj InitOracleConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitOracleConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewInitOracleConfigInstruction declares a new InitOracleConfig instruction with the provided parameters and accounts.
func NewInitOracleConfigInstruction(
	// Parameters:
	params InitializeOracleConfigParams,
	// Accounts:
	oracleConfig ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey,
	tokenAPrice ag_solanago.PublicKey,
	tokenBMint ag_solanago.PublicKey,
	tokenBPrice ag_solanago.PublicKey,
	creator ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitOracleConfig {
	return NewInitOracleConfigInstructionBuilder().
		SetParams(params).
		SetOracleConfigAccount(oracleConfig).
		SetTokenAMintAccount(tokenAMint).
		SetTokenAPriceAccount(tokenAPrice).
		SetTokenBMintAccount(tokenBMint).
		SetTokenBPriceAccount(tokenBPrice).
		SetCreatorAccount(creator).
		SetSystemProgramAccount(systemProgram)
}
