// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drip

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DripV2OrcaWhirlpool is the `dripV2OrcaWhirlpool` instruction.
type DripV2OrcaWhirlpool struct {

	// ····· common: [0] = [SIGNER] dripTriggerSource
	//
	// ············· [1] = [WRITE] vault
	//
	// ············· [2] = [] vaultProtoConfig
	//
	// ············· [3] = [] lastVaultPeriod
	//
	// ············· [4] = [WRITE] currentVaultPeriod
	//
	// ············· [5] = [WRITE] vaultTokenAAccount
	//
	// ············· [6] = [WRITE] vaultTokenBAccount
	//
	// ············· [7] = [WRITE] swapTokenAAccount
	//
	// ············· [8] = [WRITE] swapTokenBAccount
	//
	// ············· [9] = [WRITE] dripFeeTokenAAccount
	//
	// ············· [10] = [] tokenProgram
	//
	// ····· oracleCommon: [11] = [] oracleConfig
	//
	// ··················· [12] = [] tokenAMint
	//
	// ··················· [13] = [] tokenAPrice
	//
	// ··················· [14] = [] tokenBMint
	//
	// ··················· [15] = [] tokenBPrice
	//
	// [16] = [WRITE] whirlpool
	//
	// [17] = [WRITE] tickArray0
	//
	// [18] = [WRITE] tickArray1
	//
	// [19] = [WRITE] tickArray2
	//
	// [20] = [] oracle
	//
	// [21] = [] whirlpoolProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDripV2OrcaWhirlpoolInstructionBuilder creates a new `DripV2OrcaWhirlpool` instruction builder.
func NewDripV2OrcaWhirlpoolInstructionBuilder() *DripV2OrcaWhirlpool {
	nd := &DripV2OrcaWhirlpool{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 22),
	}
	return nd
}

type DripV2OrcaWhirlpoolCommonAccountsBuilder struct {
	ag_solanago.AccountMetaSlice `bin:"-"`
}

func NewDripV2OrcaWhirlpoolCommonAccountsBuilder() *DripV2OrcaWhirlpoolCommonAccountsBuilder {
	return &DripV2OrcaWhirlpoolCommonAccountsBuilder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
}

func (inst *DripV2OrcaWhirlpool) SetCommonAccountsFromBuilder(dripV2OrcaWhirlpoolCommonAccountsBuilder *DripV2OrcaWhirlpoolCommonAccountsBuilder) *DripV2OrcaWhirlpool {
	inst.AccountMetaSlice[0] = dripV2OrcaWhirlpoolCommonAccountsBuilder.GetDripTriggerSourceAccount()
	inst.AccountMetaSlice[1] = dripV2OrcaWhirlpoolCommonAccountsBuilder.GetVaultAccount()
	inst.AccountMetaSlice[2] = dripV2OrcaWhirlpoolCommonAccountsBuilder.GetVaultProtoConfigAccount()
	inst.AccountMetaSlice[3] = dripV2OrcaWhirlpoolCommonAccountsBuilder.GetLastVaultPeriodAccount()
	inst.AccountMetaSlice[4] = dripV2OrcaWhirlpoolCommonAccountsBuilder.GetCurrentVaultPeriodAccount()
	inst.AccountMetaSlice[5] = dripV2OrcaWhirlpoolCommonAccountsBuilder.GetVaultTokenAAccountAccount()
	inst.AccountMetaSlice[6] = dripV2OrcaWhirlpoolCommonAccountsBuilder.GetVaultTokenBAccountAccount()
	inst.AccountMetaSlice[7] = dripV2OrcaWhirlpoolCommonAccountsBuilder.GetSwapTokenAAccountAccount()
	inst.AccountMetaSlice[8] = dripV2OrcaWhirlpoolCommonAccountsBuilder.GetSwapTokenBAccountAccount()
	inst.AccountMetaSlice[9] = dripV2OrcaWhirlpoolCommonAccountsBuilder.GetDripFeeTokenAAccountAccount()
	inst.AccountMetaSlice[10] = dripV2OrcaWhirlpoolCommonAccountsBuilder.GetTokenProgramAccount()
	return inst
}

// SetDripTriggerSourceAccount sets the "dripTriggerSource" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) SetDripTriggerSourceAccount(dripTriggerSource ag_solanago.PublicKey) *DripV2OrcaWhirlpoolCommonAccountsBuilder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(dripTriggerSource).SIGNER()
	return inst
}

// GetDripTriggerSourceAccount gets the "dripTriggerSource" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) GetDripTriggerSourceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetVaultAccount sets the "vault" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) SetVaultAccount(vault ag_solanago.PublicKey) *DripV2OrcaWhirlpoolCommonAccountsBuilder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetVaultProtoConfigAccount sets the "vaultProtoConfig" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) SetVaultProtoConfigAccount(vaultProtoConfig ag_solanago.PublicKey) *DripV2OrcaWhirlpoolCommonAccountsBuilder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(vaultProtoConfig)
	return inst
}

// GetVaultProtoConfigAccount gets the "vaultProtoConfig" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) GetVaultProtoConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetLastVaultPeriodAccount sets the "lastVaultPeriod" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) SetLastVaultPeriodAccount(lastVaultPeriod ag_solanago.PublicKey) *DripV2OrcaWhirlpoolCommonAccountsBuilder {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(lastVaultPeriod)
	return inst
}

// GetLastVaultPeriodAccount gets the "lastVaultPeriod" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) GetLastVaultPeriodAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetCurrentVaultPeriodAccount sets the "currentVaultPeriod" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) SetCurrentVaultPeriodAccount(currentVaultPeriod ag_solanago.PublicKey) *DripV2OrcaWhirlpoolCommonAccountsBuilder {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(currentVaultPeriod).WRITE()
	return inst
}

// GetCurrentVaultPeriodAccount gets the "currentVaultPeriod" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) GetCurrentVaultPeriodAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetVaultTokenAAccountAccount sets the "vaultTokenAAccount" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) SetVaultTokenAAccountAccount(vaultTokenAAccount ag_solanago.PublicKey) *DripV2OrcaWhirlpoolCommonAccountsBuilder {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(vaultTokenAAccount).WRITE()
	return inst
}

// GetVaultTokenAAccountAccount gets the "vaultTokenAAccount" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) GetVaultTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetVaultTokenBAccountAccount sets the "vaultTokenBAccount" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) SetVaultTokenBAccountAccount(vaultTokenBAccount ag_solanago.PublicKey) *DripV2OrcaWhirlpoolCommonAccountsBuilder {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(vaultTokenBAccount).WRITE()
	return inst
}

// GetVaultTokenBAccountAccount gets the "vaultTokenBAccount" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) GetVaultTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSwapTokenAAccountAccount sets the "swapTokenAAccount" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) SetSwapTokenAAccountAccount(swapTokenAAccount ag_solanago.PublicKey) *DripV2OrcaWhirlpoolCommonAccountsBuilder {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(swapTokenAAccount).WRITE()
	return inst
}

// GetSwapTokenAAccountAccount gets the "swapTokenAAccount" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) GetSwapTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSwapTokenBAccountAccount sets the "swapTokenBAccount" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) SetSwapTokenBAccountAccount(swapTokenBAccount ag_solanago.PublicKey) *DripV2OrcaWhirlpoolCommonAccountsBuilder {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(swapTokenBAccount).WRITE()
	return inst
}

// GetSwapTokenBAccountAccount gets the "swapTokenBAccount" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) GetSwapTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetDripFeeTokenAAccountAccount sets the "dripFeeTokenAAccount" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) SetDripFeeTokenAAccountAccount(dripFeeTokenAAccount ag_solanago.PublicKey) *DripV2OrcaWhirlpoolCommonAccountsBuilder {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(dripFeeTokenAAccount).WRITE()
	return inst
}

// GetDripFeeTokenAAccountAccount gets the "dripFeeTokenAAccount" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) GetDripFeeTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *DripV2OrcaWhirlpoolCommonAccountsBuilder {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *DripV2OrcaWhirlpoolCommonAccountsBuilder) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

type DripV2OrcaWhirlpoolOracleCommonAccountsBuilder struct {
	ag_solanago.AccountMetaSlice `bin:"-"`
}

func NewDripV2OrcaWhirlpoolOracleCommonAccountsBuilder() *DripV2OrcaWhirlpoolOracleCommonAccountsBuilder {
	return &DripV2OrcaWhirlpoolOracleCommonAccountsBuilder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
}

func (inst *DripV2OrcaWhirlpool) SetOracleCommonAccountsFromBuilder(dripV2OrcaWhirlpoolOracleCommonAccountsBuilder *DripV2OrcaWhirlpoolOracleCommonAccountsBuilder) *DripV2OrcaWhirlpool {
	inst.AccountMetaSlice[11] = dripV2OrcaWhirlpoolOracleCommonAccountsBuilder.GetOracleConfigAccount()
	inst.AccountMetaSlice[12] = dripV2OrcaWhirlpoolOracleCommonAccountsBuilder.GetTokenAMintAccount()
	inst.AccountMetaSlice[13] = dripV2OrcaWhirlpoolOracleCommonAccountsBuilder.GetTokenAPriceAccount()
	inst.AccountMetaSlice[14] = dripV2OrcaWhirlpoolOracleCommonAccountsBuilder.GetTokenBMintAccount()
	inst.AccountMetaSlice[15] = dripV2OrcaWhirlpoolOracleCommonAccountsBuilder.GetTokenBPriceAccount()
	return inst
}

// SetOracleConfigAccount sets the "oracleConfig" account.
func (inst *DripV2OrcaWhirlpoolOracleCommonAccountsBuilder) SetOracleConfigAccount(oracleConfig ag_solanago.PublicKey) *DripV2OrcaWhirlpoolOracleCommonAccountsBuilder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(oracleConfig)
	return inst
}

// GetOracleConfigAccount gets the "oracleConfig" account.
func (inst *DripV2OrcaWhirlpoolOracleCommonAccountsBuilder) GetOracleConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenAMintAccount sets the "tokenAMint" account.
func (inst *DripV2OrcaWhirlpoolOracleCommonAccountsBuilder) SetTokenAMintAccount(tokenAMint ag_solanago.PublicKey) *DripV2OrcaWhirlpoolOracleCommonAccountsBuilder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenAMint)
	return inst
}

// GetTokenAMintAccount gets the "tokenAMint" account.
func (inst *DripV2OrcaWhirlpoolOracleCommonAccountsBuilder) GetTokenAMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenAPriceAccount sets the "tokenAPrice" account.
func (inst *DripV2OrcaWhirlpoolOracleCommonAccountsBuilder) SetTokenAPriceAccount(tokenAPrice ag_solanago.PublicKey) *DripV2OrcaWhirlpoolOracleCommonAccountsBuilder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenAPrice)
	return inst
}

// GetTokenAPriceAccount gets the "tokenAPrice" account.
func (inst *DripV2OrcaWhirlpoolOracleCommonAccountsBuilder) GetTokenAPriceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenBMintAccount sets the "tokenBMint" account.
func (inst *DripV2OrcaWhirlpoolOracleCommonAccountsBuilder) SetTokenBMintAccount(tokenBMint ag_solanago.PublicKey) *DripV2OrcaWhirlpoolOracleCommonAccountsBuilder {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenBMint)
	return inst
}

// GetTokenBMintAccount gets the "tokenBMint" account.
func (inst *DripV2OrcaWhirlpoolOracleCommonAccountsBuilder) GetTokenBMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenBPriceAccount sets the "tokenBPrice" account.
func (inst *DripV2OrcaWhirlpoolOracleCommonAccountsBuilder) SetTokenBPriceAccount(tokenBPrice ag_solanago.PublicKey) *DripV2OrcaWhirlpoolOracleCommonAccountsBuilder {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenBPrice)
	return inst
}

// GetTokenBPriceAccount gets the "tokenBPrice" account.
func (inst *DripV2OrcaWhirlpoolOracleCommonAccountsBuilder) GetTokenBPriceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *DripV2OrcaWhirlpool) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *DripV2OrcaWhirlpool {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(whirlpool).WRITE()
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *DripV2OrcaWhirlpool) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetTickArray0Account sets the "tickArray0" account.
func (inst *DripV2OrcaWhirlpool) SetTickArray0Account(tickArray0 ag_solanago.PublicKey) *DripV2OrcaWhirlpool {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(tickArray0).WRITE()
	return inst
}

// GetTickArray0Account gets the "tickArray0" account.
func (inst *DripV2OrcaWhirlpool) GetTickArray0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetTickArray1Account sets the "tickArray1" account.
func (inst *DripV2OrcaWhirlpool) SetTickArray1Account(tickArray1 ag_solanago.PublicKey) *DripV2OrcaWhirlpool {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(tickArray1).WRITE()
	return inst
}

// GetTickArray1Account gets the "tickArray1" account.
func (inst *DripV2OrcaWhirlpool) GetTickArray1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetTickArray2Account sets the "tickArray2" account.
func (inst *DripV2OrcaWhirlpool) SetTickArray2Account(tickArray2 ag_solanago.PublicKey) *DripV2OrcaWhirlpool {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(tickArray2).WRITE()
	return inst
}

// GetTickArray2Account gets the "tickArray2" account.
func (inst *DripV2OrcaWhirlpool) GetTickArray2Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetOracleAccount sets the "oracle" account.
func (inst *DripV2OrcaWhirlpool) SetOracleAccount(oracle ag_solanago.PublicKey) *DripV2OrcaWhirlpool {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(oracle)
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *DripV2OrcaWhirlpool) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetWhirlpoolProgramAccount sets the "whirlpoolProgram" account.
func (inst *DripV2OrcaWhirlpool) SetWhirlpoolProgramAccount(whirlpoolProgram ag_solanago.PublicKey) *DripV2OrcaWhirlpool {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(whirlpoolProgram)
	return inst
}

// GetWhirlpoolProgramAccount gets the "whirlpoolProgram" account.
func (inst *DripV2OrcaWhirlpool) GetWhirlpoolProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

func (inst DripV2OrcaWhirlpool) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DripV2OrcaWhirlpool,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DripV2OrcaWhirlpool) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DripV2OrcaWhirlpool) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CommonDripTriggerSource is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.CommonVault is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CommonVaultProtoConfig is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.CommonLastVaultPeriod is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.CommonCurrentVaultPeriod is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.CommonVaultTokenAAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CommonVaultTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.CommonSwapTokenAAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.CommonSwapTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.CommonDripFeeTokenAAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.CommonTokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.OracleCommonOracleConfig is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.OracleCommonTokenAMint is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.OracleCommonTokenAPrice is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.OracleCommonTokenBMint is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.OracleCommonTokenBPrice is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.TickArray0 is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.TickArray1 is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.TickArray2 is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.WhirlpoolProgram is not set")
		}
	}
	return nil
}

func (inst *DripV2OrcaWhirlpool) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DripV2OrcaWhirlpool")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=22]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" common/dripTriggerSource", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             common/vault", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  common/vaultProtoConfig", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   common/lastVaultPeriod", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("common/currentVaultPeriod", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       common/vaultTokenA", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("       common/vaultTokenB", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("        common/swapTokenA", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        common/swapTokenB", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("     common/dripFeeTokenA", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("      common/tokenProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("oracleCommon/oracleConfig", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("  oracleCommon/tokenAMint", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta(" oracleCommon/tokenAPrice", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("  oracleCommon/tokenBMint", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta(" oracleCommon/tokenBPrice", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("                whirlpool", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("               tickArray0", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("               tickArray1", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("               tickArray2", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("                   oracle", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("         whirlpoolProgram", inst.AccountMetaSlice.Get(21)))
					})
				})
		})
}

func (obj DripV2OrcaWhirlpool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *DripV2OrcaWhirlpool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewDripV2OrcaWhirlpoolInstruction declares a new DripV2OrcaWhirlpool instruction with the provided parameters and accounts.
func NewDripV2OrcaWhirlpoolInstruction(
	// Accounts:
	commonDripTriggerSource ag_solanago.PublicKey,
	commonVault ag_solanago.PublicKey,
	commonVaultProtoConfig ag_solanago.PublicKey,
	commonLastVaultPeriod ag_solanago.PublicKey,
	commonCurrentVaultPeriod ag_solanago.PublicKey,
	commonVaultTokenAAccount ag_solanago.PublicKey,
	commonVaultTokenBAccount ag_solanago.PublicKey,
	commonSwapTokenAAccount ag_solanago.PublicKey,
	commonSwapTokenBAccount ag_solanago.PublicKey,
	commonDripFeeTokenAAccount ag_solanago.PublicKey,
	commonTokenProgram ag_solanago.PublicKey,
	oracleCommonOracleConfig ag_solanago.PublicKey,
	oracleCommonTokenAMint ag_solanago.PublicKey,
	oracleCommonTokenAPrice ag_solanago.PublicKey,
	oracleCommonTokenBMint ag_solanago.PublicKey,
	oracleCommonTokenBPrice ag_solanago.PublicKey,
	whirlpool ag_solanago.PublicKey,
	tickArray0 ag_solanago.PublicKey,
	tickArray1 ag_solanago.PublicKey,
	tickArray2 ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	whirlpoolProgram ag_solanago.PublicKey) *DripV2OrcaWhirlpool {
	return NewDripV2OrcaWhirlpoolInstructionBuilder().
		SetCommonAccountsFromBuilder(
			NewDripV2OrcaWhirlpoolCommonAccountsBuilder().
				SetDripTriggerSourceAccount(commonDripTriggerSource).
				SetVaultAccount(commonVault).
				SetVaultProtoConfigAccount(commonVaultProtoConfig).
				SetLastVaultPeriodAccount(commonLastVaultPeriod).
				SetCurrentVaultPeriodAccount(commonCurrentVaultPeriod).
				SetVaultTokenAAccountAccount(commonVaultTokenAAccount).
				SetVaultTokenBAccountAccount(commonVaultTokenBAccount).
				SetSwapTokenAAccountAccount(commonSwapTokenAAccount).
				SetSwapTokenBAccountAccount(commonSwapTokenBAccount).
				SetDripFeeTokenAAccountAccount(commonDripFeeTokenAAccount).
				SetTokenProgramAccount(commonTokenProgram),
		).
		SetOracleCommonAccountsFromBuilder(
			NewDripV2OrcaWhirlpoolOracleCommonAccountsBuilder().
				SetOracleConfigAccount(oracleCommonOracleConfig).
				SetTokenAMintAccount(oracleCommonTokenAMint).
				SetTokenAPriceAccount(oracleCommonTokenAPrice).
				SetTokenBMintAccount(oracleCommonTokenBMint).
				SetTokenBPriceAccount(oracleCommonTokenBPrice),
		).
		SetWhirlpoolAccount(whirlpool).
		SetTickArray0Account(tickArray0).
		SetTickArray1Account(tickArray1).
		SetTickArray2Account(tickArray2).
		SetOracleAccount(oracle).
		SetWhirlpoolProgramAccount(whirlpoolProgram)
}
