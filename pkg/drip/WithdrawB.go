// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drip

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawB is the `withdrawB` instruction.
type WithdrawB struct {

	// ····· common: [0] = [WRITE, SIGNER] withdrawer
	//
	// ············· [1] = [WRITE] vault
	//
	// ············· [2] = [] vaultProtoConfig
	//
	// ············· [3] = [] vaultPeriodI
	//
	// ············· [4] = [] vaultPeriodJ
	//
	// ············· [5] = [WRITE] userPosition
	//
	// ············· [6] = [WRITE] userPositionNftAccount
	//
	// ············· [7] = [WRITE] vaultTokenBAccount
	//
	// ············· [8] = [WRITE] vaultTreasuryTokenBAccount
	//
	// ············· [9] = [WRITE] userTokenBAccount
	//
	// ············· [10] = [WRITE] referrer
	//
	// ············· [11] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawBInstructionBuilder creates a new `WithdrawB` instruction builder.
func NewWithdrawBInstructionBuilder() *WithdrawB {
	nd := &WithdrawB{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

type WithdrawBCommonAccountsBuilder struct {
	ag_solanago.AccountMetaSlice `bin:"-"`
}

func NewWithdrawBCommonAccountsBuilder() *WithdrawBCommonAccountsBuilder {
	return &WithdrawBCommonAccountsBuilder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
}

func (inst *WithdrawB) SetCommonAccountsFromBuilder(withdrawBCommonAccountsBuilder *WithdrawBCommonAccountsBuilder) *WithdrawB {
	inst.AccountMetaSlice[0] = withdrawBCommonAccountsBuilder.GetWithdrawerAccount()
	inst.AccountMetaSlice[1] = withdrawBCommonAccountsBuilder.GetVaultAccount()
	inst.AccountMetaSlice[2] = withdrawBCommonAccountsBuilder.GetVaultProtoConfigAccount()
	inst.AccountMetaSlice[3] = withdrawBCommonAccountsBuilder.GetVaultPeriodIAccount()
	inst.AccountMetaSlice[4] = withdrawBCommonAccountsBuilder.GetVaultPeriodJAccount()
	inst.AccountMetaSlice[5] = withdrawBCommonAccountsBuilder.GetUserPositionAccount()
	inst.AccountMetaSlice[6] = withdrawBCommonAccountsBuilder.GetUserPositionNftAccountAccount()
	inst.AccountMetaSlice[7] = withdrawBCommonAccountsBuilder.GetVaultTokenBAccountAccount()
	inst.AccountMetaSlice[8] = withdrawBCommonAccountsBuilder.GetVaultTreasuryTokenBAccountAccount()
	inst.AccountMetaSlice[9] = withdrawBCommonAccountsBuilder.GetUserTokenBAccountAccount()
	inst.AccountMetaSlice[10] = withdrawBCommonAccountsBuilder.GetReferrerAccount()
	inst.AccountMetaSlice[11] = withdrawBCommonAccountsBuilder.GetTokenProgramAccount()
	return inst
}

// SetWithdrawerAccount sets the "withdrawer" account.
func (inst *WithdrawBCommonAccountsBuilder) SetWithdrawerAccount(withdrawer ag_solanago.PublicKey) *WithdrawBCommonAccountsBuilder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(withdrawer).WRITE().SIGNER()
	return inst
}

// GetWithdrawerAccount gets the "withdrawer" account.
func (inst *WithdrawBCommonAccountsBuilder) GetWithdrawerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetVaultAccount sets the "vault" account.
func (inst *WithdrawBCommonAccountsBuilder) SetVaultAccount(vault ag_solanago.PublicKey) *WithdrawBCommonAccountsBuilder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *WithdrawBCommonAccountsBuilder) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetVaultProtoConfigAccount sets the "vaultProtoConfig" account.
func (inst *WithdrawBCommonAccountsBuilder) SetVaultProtoConfigAccount(vaultProtoConfig ag_solanago.PublicKey) *WithdrawBCommonAccountsBuilder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(vaultProtoConfig)
	return inst
}

// GetVaultProtoConfigAccount gets the "vaultProtoConfig" account.
func (inst *WithdrawBCommonAccountsBuilder) GetVaultProtoConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetVaultPeriodIAccount sets the "vaultPeriodI" account.
func (inst *WithdrawBCommonAccountsBuilder) SetVaultPeriodIAccount(vaultPeriodI ag_solanago.PublicKey) *WithdrawBCommonAccountsBuilder {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(vaultPeriodI)
	return inst
}

// GetVaultPeriodIAccount gets the "vaultPeriodI" account.
func (inst *WithdrawBCommonAccountsBuilder) GetVaultPeriodIAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetVaultPeriodJAccount sets the "vaultPeriodJ" account.
func (inst *WithdrawBCommonAccountsBuilder) SetVaultPeriodJAccount(vaultPeriodJ ag_solanago.PublicKey) *WithdrawBCommonAccountsBuilder {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(vaultPeriodJ)
	return inst
}

// GetVaultPeriodJAccount gets the "vaultPeriodJ" account.
func (inst *WithdrawBCommonAccountsBuilder) GetVaultPeriodJAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetUserPositionAccount sets the "userPosition" account.
func (inst *WithdrawBCommonAccountsBuilder) SetUserPositionAccount(userPosition ag_solanago.PublicKey) *WithdrawBCommonAccountsBuilder {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(userPosition).WRITE()
	return inst
}

// GetUserPositionAccount gets the "userPosition" account.
func (inst *WithdrawBCommonAccountsBuilder) GetUserPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetUserPositionNftAccountAccount sets the "userPositionNftAccount" account.
func (inst *WithdrawBCommonAccountsBuilder) SetUserPositionNftAccountAccount(userPositionNftAccount ag_solanago.PublicKey) *WithdrawBCommonAccountsBuilder {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(userPositionNftAccount).WRITE()
	return inst
}

// GetUserPositionNftAccountAccount gets the "userPositionNftAccount" account.
func (inst *WithdrawBCommonAccountsBuilder) GetUserPositionNftAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetVaultTokenBAccountAccount sets the "vaultTokenBAccount" account.
func (inst *WithdrawBCommonAccountsBuilder) SetVaultTokenBAccountAccount(vaultTokenBAccount ag_solanago.PublicKey) *WithdrawBCommonAccountsBuilder {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(vaultTokenBAccount).WRITE()
	return inst
}

// GetVaultTokenBAccountAccount gets the "vaultTokenBAccount" account.
func (inst *WithdrawBCommonAccountsBuilder) GetVaultTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetVaultTreasuryTokenBAccountAccount sets the "vaultTreasuryTokenBAccount" account.
func (inst *WithdrawBCommonAccountsBuilder) SetVaultTreasuryTokenBAccountAccount(vaultTreasuryTokenBAccount ag_solanago.PublicKey) *WithdrawBCommonAccountsBuilder {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(vaultTreasuryTokenBAccount).WRITE()
	return inst
}

// GetVaultTreasuryTokenBAccountAccount gets the "vaultTreasuryTokenBAccount" account.
func (inst *WithdrawBCommonAccountsBuilder) GetVaultTreasuryTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetUserTokenBAccountAccount sets the "userTokenBAccount" account.
func (inst *WithdrawBCommonAccountsBuilder) SetUserTokenBAccountAccount(userTokenBAccount ag_solanago.PublicKey) *WithdrawBCommonAccountsBuilder {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(userTokenBAccount).WRITE()
	return inst
}

// GetUserTokenBAccountAccount gets the "userTokenBAccount" account.
func (inst *WithdrawBCommonAccountsBuilder) GetUserTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetReferrerAccount sets the "referrer" account.
func (inst *WithdrawBCommonAccountsBuilder) SetReferrerAccount(referrer ag_solanago.PublicKey) *WithdrawBCommonAccountsBuilder {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(referrer).WRITE()
	return inst
}

// GetReferrerAccount gets the "referrer" account.
func (inst *WithdrawBCommonAccountsBuilder) GetReferrerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *WithdrawBCommonAccountsBuilder) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *WithdrawBCommonAccountsBuilder {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *WithdrawBCommonAccountsBuilder) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst WithdrawB) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawB,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawB) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawB) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CommonWithdrawer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.CommonVault is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CommonVaultProtoConfig is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.CommonVaultPeriodI is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.CommonVaultPeriodJ is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.CommonUserPosition is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CommonUserPositionNftAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.CommonVaultTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.CommonVaultTreasuryTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.CommonUserTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.CommonReferrer is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.CommonTokenProgram is not set")
		}
	}
	return nil
}

func (inst *WithdrawB) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawB")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         common/withdrawer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              common/vault", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   common/vaultProtoConfig", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       common/vaultPeriodI", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       common/vaultPeriodJ", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       common/userPosition", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    common/userPositionNft", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("        common/vaultTokenB", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("common/vaultTreasuryTokenB", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         common/userTokenB", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("           common/referrer", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("       common/tokenProgram", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj WithdrawB) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *WithdrawB) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewWithdrawBInstruction declares a new WithdrawB instruction with the provided parameters and accounts.
func NewWithdrawBInstruction(
	// Accounts:
	commonWithdrawer ag_solanago.PublicKey,
	commonVault ag_solanago.PublicKey,
	commonVaultProtoConfig ag_solanago.PublicKey,
	commonVaultPeriodI ag_solanago.PublicKey,
	commonVaultPeriodJ ag_solanago.PublicKey,
	commonUserPosition ag_solanago.PublicKey,
	commonUserPositionNftAccount ag_solanago.PublicKey,
	commonVaultTokenBAccount ag_solanago.PublicKey,
	commonVaultTreasuryTokenBAccount ag_solanago.PublicKey,
	commonUserTokenBAccount ag_solanago.PublicKey,
	commonReferrer ag_solanago.PublicKey,
	commonTokenProgram ag_solanago.PublicKey) *WithdrawB {
	return NewWithdrawBInstructionBuilder().
		SetCommonAccountsFromBuilder(
			NewWithdrawBCommonAccountsBuilder().
				SetWithdrawerAccount(commonWithdrawer).
				SetVaultAccount(commonVault).
				SetVaultProtoConfigAccount(commonVaultProtoConfig).
				SetVaultPeriodIAccount(commonVaultPeriodI).
				SetVaultPeriodJAccount(commonVaultPeriodJ).
				SetUserPositionAccount(commonUserPosition).
				SetUserPositionNftAccountAccount(commonUserPositionNftAccount).
				SetVaultTokenBAccountAccount(commonVaultTokenBAccount).
				SetVaultTreasuryTokenBAccountAccount(commonVaultTreasuryTokenBAccount).
				SetUserTokenBAccountAccount(commonUserTokenBAccount).
				SetReferrerAccount(commonReferrer).
				SetTokenProgramAccount(commonTokenProgram),
		)
}
