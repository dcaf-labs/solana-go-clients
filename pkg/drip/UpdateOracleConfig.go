// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drip

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateOracleConfig is the `updateOracleConfig` instruction.
type UpdateOracleConfig struct {
	Params *UpdateOracleConfigParams

	// [0] = [WRITE] oracleConfig
	//
	// [1] = [] newTokenAMint
	//
	// [2] = [] newTokenAPrice
	//
	// [3] = [] newTokenBMint
	//
	// [4] = [] newTokenBPrice
	//
	// [5] = [SIGNER] currentUpdateAuthority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateOracleConfigInstructionBuilder creates a new `UpdateOracleConfig` instruction builder.
func NewUpdateOracleConfigInstructionBuilder() *UpdateOracleConfig {
	nd := &UpdateOracleConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *UpdateOracleConfig) SetParams(params UpdateOracleConfigParams) *UpdateOracleConfig {
	inst.Params = &params
	return inst
}

// SetOracleConfigAccount sets the "oracleConfig" account.
func (inst *UpdateOracleConfig) SetOracleConfigAccount(oracleConfig ag_solanago.PublicKey) *UpdateOracleConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(oracleConfig).WRITE()
	return inst
}

// GetOracleConfigAccount gets the "oracleConfig" account.
func (inst *UpdateOracleConfig) GetOracleConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetNewTokenAMintAccount sets the "newTokenAMint" account.
func (inst *UpdateOracleConfig) SetNewTokenAMintAccount(newTokenAMint ag_solanago.PublicKey) *UpdateOracleConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(newTokenAMint)
	return inst
}

// GetNewTokenAMintAccount gets the "newTokenAMint" account.
func (inst *UpdateOracleConfig) GetNewTokenAMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetNewTokenAPriceAccount sets the "newTokenAPrice" account.
func (inst *UpdateOracleConfig) SetNewTokenAPriceAccount(newTokenAPrice ag_solanago.PublicKey) *UpdateOracleConfig {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(newTokenAPrice)
	return inst
}

// GetNewTokenAPriceAccount gets the "newTokenAPrice" account.
func (inst *UpdateOracleConfig) GetNewTokenAPriceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetNewTokenBMintAccount sets the "newTokenBMint" account.
func (inst *UpdateOracleConfig) SetNewTokenBMintAccount(newTokenBMint ag_solanago.PublicKey) *UpdateOracleConfig {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(newTokenBMint)
	return inst
}

// GetNewTokenBMintAccount gets the "newTokenBMint" account.
func (inst *UpdateOracleConfig) GetNewTokenBMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetNewTokenBPriceAccount sets the "newTokenBPrice" account.
func (inst *UpdateOracleConfig) SetNewTokenBPriceAccount(newTokenBPrice ag_solanago.PublicKey) *UpdateOracleConfig {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(newTokenBPrice)
	return inst
}

// GetNewTokenBPriceAccount gets the "newTokenBPrice" account.
func (inst *UpdateOracleConfig) GetNewTokenBPriceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetCurrentUpdateAuthorityAccount sets the "currentUpdateAuthority" account.
func (inst *UpdateOracleConfig) SetCurrentUpdateAuthorityAccount(currentUpdateAuthority ag_solanago.PublicKey) *UpdateOracleConfig {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(currentUpdateAuthority).SIGNER()
	return inst
}

// GetCurrentUpdateAuthorityAccount gets the "currentUpdateAuthority" account.
func (inst *UpdateOracleConfig) GetCurrentUpdateAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst UpdateOracleConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateOracleConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateOracleConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateOracleConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.OracleConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.NewTokenAMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.NewTokenAPrice is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.NewTokenBMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.NewTokenBPrice is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.CurrentUpdateAuthority is not set")
		}
	}
	return nil
}

func (inst *UpdateOracleConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateOracleConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          oracleConfig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         newTokenAMint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        newTokenAPrice", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         newTokenBMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        newTokenBPrice", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("currentUpdateAuthority", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj UpdateOracleConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateOracleConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateOracleConfigInstruction declares a new UpdateOracleConfig instruction with the provided parameters and accounts.
func NewUpdateOracleConfigInstruction(
	// Parameters:
	params UpdateOracleConfigParams,
	// Accounts:
	oracleConfig ag_solanago.PublicKey,
	newTokenAMint ag_solanago.PublicKey,
	newTokenAPrice ag_solanago.PublicKey,
	newTokenBMint ag_solanago.PublicKey,
	newTokenBPrice ag_solanago.PublicKey,
	currentUpdateAuthority ag_solanago.PublicKey) *UpdateOracleConfig {
	return NewUpdateOracleConfigInstructionBuilder().
		SetParams(params).
		SetOracleConfigAccount(oracleConfig).
		SetNewTokenAMintAccount(newTokenAMint).
		SetNewTokenAPriceAccount(newTokenAPrice).
		SetNewTokenBMintAccount(newTokenBMint).
		SetNewTokenBPriceAccount(newTokenBPrice).
		SetCurrentUpdateAuthorityAccount(currentUpdateAuthority)
}
