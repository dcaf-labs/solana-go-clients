// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drip

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetVaultOracleConfig is the `setVaultOracleConfig` instruction.
type SetVaultOracleConfig struct {

	// ····· vaultUpdateCommonAccounts: [0] = [WRITE, SIGNER] admin
	//
	// ································ [1] = [WRITE] vault
	//
	// ································ [2] = [] vaultProtoConfig
	//
	// [3] = [] newOracleConfig
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetVaultOracleConfigInstructionBuilder creates a new `SetVaultOracleConfig` instruction builder.
func NewSetVaultOracleConfigInstructionBuilder() *SetVaultOracleConfig {
	nd := &SetVaultOracleConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

type SetVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder struct {
	ag_solanago.AccountMetaSlice `bin:"-"`
}

func NewSetVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder() *SetVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder {
	return &SetVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
}

func (inst *SetVaultOracleConfig) SetVaultUpdateCommonAccountsAccountsFromBuilder(setVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder *SetVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder) *SetVaultOracleConfig {
	inst.AccountMetaSlice[0] = setVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder.GetAdminAccount()
	inst.AccountMetaSlice[1] = setVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder.GetVaultAccount()
	inst.AccountMetaSlice[2] = setVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder.GetVaultProtoConfigAccount()
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *SetVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder) SetAdminAccount(admin ag_solanago.PublicKey) *SetVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *SetVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetVaultAccount sets the "vault" account.
func (inst *SetVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder) SetVaultAccount(vault ag_solanago.PublicKey) *SetVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *SetVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetVaultProtoConfigAccount sets the "vaultProtoConfig" account.
func (inst *SetVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder) SetVaultProtoConfigAccount(vaultProtoConfig ag_solanago.PublicKey) *SetVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(vaultProtoConfig)
	return inst
}

// GetVaultProtoConfigAccount gets the "vaultProtoConfig" account.
func (inst *SetVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder) GetVaultProtoConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetNewOracleConfigAccount sets the "newOracleConfig" account.
func (inst *SetVaultOracleConfig) SetNewOracleConfigAccount(newOracleConfig ag_solanago.PublicKey) *SetVaultOracleConfig {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(newOracleConfig)
	return inst
}

// GetNewOracleConfigAccount gets the "newOracleConfig" account.
func (inst *SetVaultOracleConfig) GetNewOracleConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst SetVaultOracleConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetVaultOracleConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetVaultOracleConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetVaultOracleConfig) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.VaultUpdateCommonAccountsAdmin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.VaultUpdateCommonAccountsVault is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.VaultUpdateCommonAccountsVaultProtoConfig is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.NewOracleConfig is not set")
		}
	}
	return nil
}

func (inst *SetVaultOracleConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetVaultOracleConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           vaultUpdateCommonAccounts/admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           vaultUpdateCommonAccounts/vault", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("vaultUpdateCommonAccounts/vaultProtoConfig", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                           newOracleConfig", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj SetVaultOracleConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SetVaultOracleConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSetVaultOracleConfigInstruction declares a new SetVaultOracleConfig instruction with the provided parameters and accounts.
func NewSetVaultOracleConfigInstruction(
	// Accounts:
	vaultUpdateCommonAccountsAdmin ag_solanago.PublicKey,
	vaultUpdateCommonAccountsVault ag_solanago.PublicKey,
	vaultUpdateCommonAccountsVaultProtoConfig ag_solanago.PublicKey,
	newOracleConfig ag_solanago.PublicKey) *SetVaultOracleConfig {
	return NewSetVaultOracleConfigInstructionBuilder().
		SetVaultUpdateCommonAccountsAccountsFromBuilder(
			NewSetVaultOracleConfigVaultUpdateCommonAccountsAccountsBuilder().
				SetAdminAccount(vaultUpdateCommonAccountsAdmin).
				SetVaultAccount(vaultUpdateCommonAccountsVault).
				SetVaultProtoConfigAccount(vaultUpdateCommonAccountsVaultProtoConfig),
		).
		SetNewOracleConfigAccount(newOracleConfig)
}
