// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drip

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ClosePosition is the `closePosition` instruction.
type ClosePosition struct {

	// ····· common: [0] = [WRITE, SIGNER] withdrawer
	//
	// ············· [1] = [WRITE] vault
	//
	// ············· [2] = [] vaultProtoConfig
	//
	// ············· [3] = [] vaultPeriodI
	//
	// ············· [4] = [] vaultPeriodJ
	//
	// ············· [5] = [WRITE] userPosition
	//
	// ············· [6] = [WRITE] userPositionNftAccount
	//
	// ············· [7] = [WRITE] vaultTokenBAccount
	//
	// ············· [8] = [WRITE] vaultTreasuryTokenBAccount
	//
	// ············· [9] = [WRITE] userTokenBAccount
	//
	// ············· [10] = [WRITE] referrer
	//
	// ············· [11] = [] tokenProgram
	//
	// [12] = [WRITE] vaultPeriodUserExpiry
	//
	// [13] = [WRITE] vaultTokenAAccount
	//
	// [14] = [WRITE] userTokenAAccount
	//
	// [15] = [WRITE] userPositionNftMint
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClosePositionInstructionBuilder creates a new `ClosePosition` instruction builder.
func NewClosePositionInstructionBuilder() *ClosePosition {
	nd := &ClosePosition{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	return nd
}

type ClosePositionCommonAccountsBuilder struct {
	ag_solanago.AccountMetaSlice `bin:"-"`
}

func NewClosePositionCommonAccountsBuilder() *ClosePositionCommonAccountsBuilder {
	return &ClosePositionCommonAccountsBuilder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
}

func (inst *ClosePosition) SetCommonAccountsFromBuilder(closePositionCommonAccountsBuilder *ClosePositionCommonAccountsBuilder) *ClosePosition {
	inst.AccountMetaSlice[0] = closePositionCommonAccountsBuilder.GetWithdrawerAccount()
	inst.AccountMetaSlice[1] = closePositionCommonAccountsBuilder.GetVaultAccount()
	inst.AccountMetaSlice[2] = closePositionCommonAccountsBuilder.GetVaultProtoConfigAccount()
	inst.AccountMetaSlice[3] = closePositionCommonAccountsBuilder.GetVaultPeriodIAccount()
	inst.AccountMetaSlice[4] = closePositionCommonAccountsBuilder.GetVaultPeriodJAccount()
	inst.AccountMetaSlice[5] = closePositionCommonAccountsBuilder.GetUserPositionAccount()
	inst.AccountMetaSlice[6] = closePositionCommonAccountsBuilder.GetUserPositionNftAccountAccount()
	inst.AccountMetaSlice[7] = closePositionCommonAccountsBuilder.GetVaultTokenBAccountAccount()
	inst.AccountMetaSlice[8] = closePositionCommonAccountsBuilder.GetVaultTreasuryTokenBAccountAccount()
	inst.AccountMetaSlice[9] = closePositionCommonAccountsBuilder.GetUserTokenBAccountAccount()
	inst.AccountMetaSlice[10] = closePositionCommonAccountsBuilder.GetReferrerAccount()
	inst.AccountMetaSlice[11] = closePositionCommonAccountsBuilder.GetTokenProgramAccount()
	return inst
}

// SetWithdrawerAccount sets the "withdrawer" account.
func (inst *ClosePositionCommonAccountsBuilder) SetWithdrawerAccount(withdrawer ag_solanago.PublicKey) *ClosePositionCommonAccountsBuilder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(withdrawer).WRITE().SIGNER()
	return inst
}

// GetWithdrawerAccount gets the "withdrawer" account.
func (inst *ClosePositionCommonAccountsBuilder) GetWithdrawerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetVaultAccount sets the "vault" account.
func (inst *ClosePositionCommonAccountsBuilder) SetVaultAccount(vault ag_solanago.PublicKey) *ClosePositionCommonAccountsBuilder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *ClosePositionCommonAccountsBuilder) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetVaultProtoConfigAccount sets the "vaultProtoConfig" account.
func (inst *ClosePositionCommonAccountsBuilder) SetVaultProtoConfigAccount(vaultProtoConfig ag_solanago.PublicKey) *ClosePositionCommonAccountsBuilder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(vaultProtoConfig)
	return inst
}

// GetVaultProtoConfigAccount gets the "vaultProtoConfig" account.
func (inst *ClosePositionCommonAccountsBuilder) GetVaultProtoConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetVaultPeriodIAccount sets the "vaultPeriodI" account.
func (inst *ClosePositionCommonAccountsBuilder) SetVaultPeriodIAccount(vaultPeriodI ag_solanago.PublicKey) *ClosePositionCommonAccountsBuilder {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(vaultPeriodI)
	return inst
}

// GetVaultPeriodIAccount gets the "vaultPeriodI" account.
func (inst *ClosePositionCommonAccountsBuilder) GetVaultPeriodIAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetVaultPeriodJAccount sets the "vaultPeriodJ" account.
func (inst *ClosePositionCommonAccountsBuilder) SetVaultPeriodJAccount(vaultPeriodJ ag_solanago.PublicKey) *ClosePositionCommonAccountsBuilder {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(vaultPeriodJ)
	return inst
}

// GetVaultPeriodJAccount gets the "vaultPeriodJ" account.
func (inst *ClosePositionCommonAccountsBuilder) GetVaultPeriodJAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetUserPositionAccount sets the "userPosition" account.
func (inst *ClosePositionCommonAccountsBuilder) SetUserPositionAccount(userPosition ag_solanago.PublicKey) *ClosePositionCommonAccountsBuilder {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(userPosition).WRITE()
	return inst
}

// GetUserPositionAccount gets the "userPosition" account.
func (inst *ClosePositionCommonAccountsBuilder) GetUserPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetUserPositionNftAccountAccount sets the "userPositionNftAccount" account.
func (inst *ClosePositionCommonAccountsBuilder) SetUserPositionNftAccountAccount(userPositionNftAccount ag_solanago.PublicKey) *ClosePositionCommonAccountsBuilder {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(userPositionNftAccount).WRITE()
	return inst
}

// GetUserPositionNftAccountAccount gets the "userPositionNftAccount" account.
func (inst *ClosePositionCommonAccountsBuilder) GetUserPositionNftAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetVaultTokenBAccountAccount sets the "vaultTokenBAccount" account.
func (inst *ClosePositionCommonAccountsBuilder) SetVaultTokenBAccountAccount(vaultTokenBAccount ag_solanago.PublicKey) *ClosePositionCommonAccountsBuilder {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(vaultTokenBAccount).WRITE()
	return inst
}

// GetVaultTokenBAccountAccount gets the "vaultTokenBAccount" account.
func (inst *ClosePositionCommonAccountsBuilder) GetVaultTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetVaultTreasuryTokenBAccountAccount sets the "vaultTreasuryTokenBAccount" account.
func (inst *ClosePositionCommonAccountsBuilder) SetVaultTreasuryTokenBAccountAccount(vaultTreasuryTokenBAccount ag_solanago.PublicKey) *ClosePositionCommonAccountsBuilder {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(vaultTreasuryTokenBAccount).WRITE()
	return inst
}

// GetVaultTreasuryTokenBAccountAccount gets the "vaultTreasuryTokenBAccount" account.
func (inst *ClosePositionCommonAccountsBuilder) GetVaultTreasuryTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetUserTokenBAccountAccount sets the "userTokenBAccount" account.
func (inst *ClosePositionCommonAccountsBuilder) SetUserTokenBAccountAccount(userTokenBAccount ag_solanago.PublicKey) *ClosePositionCommonAccountsBuilder {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(userTokenBAccount).WRITE()
	return inst
}

// GetUserTokenBAccountAccount gets the "userTokenBAccount" account.
func (inst *ClosePositionCommonAccountsBuilder) GetUserTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetReferrerAccount sets the "referrer" account.
func (inst *ClosePositionCommonAccountsBuilder) SetReferrerAccount(referrer ag_solanago.PublicKey) *ClosePositionCommonAccountsBuilder {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(referrer).WRITE()
	return inst
}

// GetReferrerAccount gets the "referrer" account.
func (inst *ClosePositionCommonAccountsBuilder) GetReferrerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *ClosePositionCommonAccountsBuilder) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *ClosePositionCommonAccountsBuilder {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *ClosePositionCommonAccountsBuilder) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetVaultPeriodUserExpiryAccount sets the "vaultPeriodUserExpiry" account.
func (inst *ClosePosition) SetVaultPeriodUserExpiryAccount(vaultPeriodUserExpiry ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(vaultPeriodUserExpiry).WRITE()
	return inst
}

// GetVaultPeriodUserExpiryAccount gets the "vaultPeriodUserExpiry" account.
func (inst *ClosePosition) GetVaultPeriodUserExpiryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetVaultTokenAAccountAccount sets the "vaultTokenAAccount" account.
func (inst *ClosePosition) SetVaultTokenAAccountAccount(vaultTokenAAccount ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(vaultTokenAAccount).WRITE()
	return inst
}

// GetVaultTokenAAccountAccount gets the "vaultTokenAAccount" account.
func (inst *ClosePosition) GetVaultTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetUserTokenAAccountAccount sets the "userTokenAAccount" account.
func (inst *ClosePosition) SetUserTokenAAccountAccount(userTokenAAccount ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(userTokenAAccount).WRITE()
	return inst
}

// GetUserTokenAAccountAccount gets the "userTokenAAccount" account.
func (inst *ClosePosition) GetUserTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetUserPositionNftMintAccount sets the "userPositionNftMint" account.
func (inst *ClosePosition) SetUserPositionNftMintAccount(userPositionNftMint ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(userPositionNftMint).WRITE()
	return inst
}

// GetUserPositionNftMintAccount gets the "userPositionNftMint" account.
func (inst *ClosePosition) GetUserPositionNftMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst ClosePosition) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ClosePosition,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ClosePosition) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ClosePosition) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CommonWithdrawer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.CommonVault is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CommonVaultProtoConfig is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.CommonVaultPeriodI is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.CommonVaultPeriodJ is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.CommonUserPosition is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CommonUserPositionNftAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.CommonVaultTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.CommonVaultTreasuryTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.CommonUserTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.CommonReferrer is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.CommonTokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.VaultPeriodUserExpiry is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.VaultTokenAAccount is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.UserTokenAAccount is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.UserPositionNftMint is not set")
		}
	}
	return nil
}

func (inst *ClosePosition) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ClosePosition")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         common/withdrawer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              common/vault", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   common/vaultProtoConfig", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       common/vaultPeriodI", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       common/vaultPeriodJ", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       common/userPosition", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    common/userPositionNft", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("        common/vaultTokenB", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("common/vaultTreasuryTokenB", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         common/userTokenB", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("           common/referrer", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("       common/tokenProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("     vaultPeriodUserExpiry", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("               vaultTokenA", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("                userTokenA", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("       userPositionNftMint", inst.AccountMetaSlice.Get(15)))
					})
				})
		})
}

func (obj ClosePosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ClosePosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewClosePositionInstruction declares a new ClosePosition instruction with the provided parameters and accounts.
func NewClosePositionInstruction(
	// Accounts:
	commonWithdrawer ag_solanago.PublicKey,
	commonVault ag_solanago.PublicKey,
	commonVaultProtoConfig ag_solanago.PublicKey,
	commonVaultPeriodI ag_solanago.PublicKey,
	commonVaultPeriodJ ag_solanago.PublicKey,
	commonUserPosition ag_solanago.PublicKey,
	commonUserPositionNftAccount ag_solanago.PublicKey,
	commonVaultTokenBAccount ag_solanago.PublicKey,
	commonVaultTreasuryTokenBAccount ag_solanago.PublicKey,
	commonUserTokenBAccount ag_solanago.PublicKey,
	commonReferrer ag_solanago.PublicKey,
	commonTokenProgram ag_solanago.PublicKey,
	vaultPeriodUserExpiry ag_solanago.PublicKey,
	vaultTokenAAccount ag_solanago.PublicKey,
	userTokenAAccount ag_solanago.PublicKey,
	userPositionNftMint ag_solanago.PublicKey) *ClosePosition {
	return NewClosePositionInstructionBuilder().
		SetCommonAccountsFromBuilder(
			NewClosePositionCommonAccountsBuilder().
				SetWithdrawerAccount(commonWithdrawer).
				SetVaultAccount(commonVault).
				SetVaultProtoConfigAccount(commonVaultProtoConfig).
				SetVaultPeriodIAccount(commonVaultPeriodI).
				SetVaultPeriodJAccount(commonVaultPeriodJ).
				SetUserPositionAccount(commonUserPosition).
				SetUserPositionNftAccountAccount(commonUserPositionNftAccount).
				SetVaultTokenBAccountAccount(commonVaultTokenBAccount).
				SetVaultTreasuryTokenBAccountAccount(commonVaultTreasuryTokenBAccount).
				SetUserTokenBAccountAccount(commonUserTokenBAccount).
				SetReferrerAccount(commonReferrer).
				SetTokenProgramAccount(commonTokenProgram),
		).
		SetVaultPeriodUserExpiryAccount(vaultPeriodUserExpiry).
		SetVaultTokenAAccountAccount(vaultTokenAAccount).
		SetUserTokenAAccountAccount(userTokenAAccount).
		SetUserPositionNftMintAccount(userPositionNftMint)
}
